from enum import Enum


class Variable(Enum):
    CUSTO_MARGINAL_OPERACAO = "CMO"
    VALOR_AGUA = "VAGUA"
    CUSTO_GERACAO_TERMICA = "CTER"
    CUSTO_OPERACAO = "COP"
    CUSTO_FUTURO = "CFU"
    ENERGIA_NATURAL_AFLUENTE_ABSOLUTA = "ENAA"
    ENERGIA_NATURAL_AFLUENTE_MLT = "ENAM"
    ENERGIA_ARMAZENADA_ABSOLUTA_INICIAL = "EARMI"
    ENERGIA_ARMAZENADA_PERCENTUAL_INICIAL = "EARPI"
    ENERGIA_ARMAZENADA_ABSOLUTA_FINAL = "EARMF"
    ENERGIA_ARMAZENADA_PERCENTUAL_FINAL = "EARPF"
    GERACAO_HIDRAULICA = "GHID"
    GERACAO_TERMICA = "GTER"
    GERACAO_EOLICA = "GEOL"
    ENERGIA_VERTIDA = "EVER"
    ENERGIA_VERTIDA_TURBINAVEL = "EVERT"
    ENERGIA_VERTIDA_NAO_TURBINAVEL = "EVERNT"
    VAZAO_AFLUENTE = "QAFL"
    VAZAO_DEFLUENTE = "QDEF"
    VAZAO_INCREMENTAL = "QINC"
    VAZAO_TURBINADA = "QTUR"
    VAZAO_VERTIDA = "QVER"
    VELOCIDADE_VENTO = "VENTO"
    VOLUME_ARMAZENADO_ABSOLUTO_INICIAL = "VARMI"
    VOLUME_ARMAZENADO_PERCENTUAL_INICIAL = "VARPI"
    VOLUME_ARMAZENADO_ABSOLUTO_FINAL = "VARMF"
    VOLUME_ARMAZENADO_PERCENTUAL_FINAL = "VARPF"
    VOLUME_VERTIDO = "VVER"
    VOLUME_TURBINADO = "VTUR"
    INTERCAMBIO = "INT"
    MERCADO = "MER"
    MERCADO_LIQUIDO = "MERL"
    DEFICIT = "DEF"

    @classmethod
    def factory(cls, val: str) -> "Variable":
        for v in cls:
            if v.value == val:
                return v
        return cls.ENERGIA_ARMAZENADA_ABSOLUTA_FINAL

    def __repr__(self) -> str:
        return self.value
